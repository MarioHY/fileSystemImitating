#ifndef UTIL_H
#define UTIL_H
#include "base.h"
//////////////////////////////////////////////////////////////////////////////////////////基础函数//////////////////////////////////////////////////////////////////////////////////////////////////////////

int readUsers(std::string path, User UFD[]);//从root中的account.txt中读取用户信息
double calcFileSize(std::string filePath);//计算文件大小
double calcDirSize(std::string dirPath);//计算文件夹大小
void initFirstLevelSystem(std::string path, User UFD[], DIR* MFD, std::string CountPath, bool Map[]);//初始化一级文件系统
void initUserLevelSystemTree(DIR *dir, int index, User UFD[], bool Map[]); //递归初始化二级文件系统以下文件
void help();//菜单
void initUserLevelSystem(std::string path, DIR* MFD, User UFD[], bool Map[]);//二级文件系统（用户）初始化
void setColor(WORD color);//颜色设置
void showDate(long long createTime);//显示文件起始日期
void showInfo(FCB* fcb);//显示文件内容
void lsAll(DIR* dir);//显示所用文件信息
void lsName(DIR* dir);//显示文件名
std::string excludePathPrefix(const std::string& fullPath, const std::string& prefixToExclude);//排除window的前缀，为转换为linux路径做准备
std::string convertWinToLinux(std::string winPath, std::string userName, std::string homePath);//将window路径转换为当前用户的linux路径
int Login(User UFD[]);//登录
DIR* findDir(DIR* dir, std::string dirPath);//查找路径下对应目录
void rm_r(DIR* dir, bool Map[]);//递归删除文件夹下的文件
double resetSize(DIR *dir, int index);//重新设置大小，不打算重新计算文件大小，就d递归重新计算机目录大小
void cp_r(DIR* src, DIR* dst, bool Map[]);//递归复制目录及以下文件
void showCommandLine(DIR* userDir, std::string nowPath, std::string userName, std::string homePath);//根据不同用户显示不同路径,提示符
int getfileLineNum(std::string filePath);//计算文本行数
///////////////////////////////////////////////////////////////////////////////////////////功能函数/////////////////////////////////////////////////////////////////////////////////////////////////////
//----------------------------------------------------------以下功能只是指当前被封装的功能，并不指这些-----------------------------------------------
//////////////////////////////////////////////////////////////////////////ls//////////////////////////////////////////////////////////////////////
void lsLocalNameF(DIR* now, std::string second_2);//显示指定目录的名字
void ls_lAnyTypeF(DIR* now, std::string second_2);//显示指定目录内文件信息或单个文件信息ls -l 目录名/文件名
//////////////////////////////////////////////////////////////////////////ll////////////////////////////////////////////////////////////////////////////
void llAnyTypeF(DIR* now, std::string second);//显示对应知道目录或文件的所有详细信息
////////////////////////////////////////////////////////////////////////touch/////////////////////////////////////////////////////////////////////////
bool touchF(DIR* now, DIR* userDir, bool Map[], std::string second);//创建文件
///////////////////////////////////////////////////////////////////////mkdir//////////////////////////////////////////////////////////////////////////////////
bool mkdirF(DIR* now, DIR* userDir, bool Map[], std::string second);//创建文件夹功能
///////////////////////////////////////////////////////////////////////rm/////////////////////////////////////////////////////////////////////////////
bool rmF(DIR* now, DIR* userDir, bool Map[], std::string second_2);//删除文件
bool rm_rF(DIR* now, DIR* userDir, bool Map[], std::string second_2);//删除文件夹
//////////////////////////////////////////////////////////////////////find////////////////////////////////////////////////////////////////////////////
void find(DIR* dir, std::string fileName);//查找对应文件名的路径信息
///////////////////////////////////////////////////////////////////////cp//////////////////////////////////////////////////////////////////////////////
bool cpF(DIR* now, DIR* userDir, bool Map[], std::string second_1, std::string second_2);//复制文件
bool cp_rF(DIR* now, DIR* userDir, bool Map[], std::string second_2_1, std::string second_2_2);//复制文件夹
//////////////////////////////////////////////////////////////////////mv//////////////////////////////////////////////////////////////////////////////////
void mvF(DIR* now, int mvSource, int exist, int empty);//移动文件到文件夹
void mv_F(DIR* now, int mvSource, int empty);//移动文件到上一级目录
bool cp_rAnyDir(DIR* now, DIR* aim, DIR* userDir, bool Map[], std::string second_2_1, std::string second_2_2); //复制文件夹到任意位置
/////////////////////////////////////////////////////////////////////chmod///////////////////////////////////////////////////////////////////////////////////////
void chmodF(DIR* now, std::string second_1, std::string second_2);//切换文件权限
///////////////////////////////////////////////////////////////////读文件/////////////////////////////////////////////////////////////////////////////////
int cat(std::string filePath);//cat读文件
int head(std::string filePath, int num);//head读文件头num行
int tail(std::string filePath, int num);//tail读取文件尾num行
//////////////////////////////////////////////////////////////////useradd///////////////////////////////////////////
int addUser(std::string homePath, std::string passwdPath, DIR* MFD, User UFD[], bool Map[], std::string name, std::string password);//添加用户
#endif